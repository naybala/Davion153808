<?php

namespace $NAMESPACE$;

use $PROJECT_NAME$\Foundations\Domain\$FOLDER_NAME$\Repositories\Eloquent\$CAPITAL$Repository;
use $PROJECT_NAME$\$PATH_NAME$\Common\BaseController;
use $PROJECT_NAME$\$PATH_NAME$\$FOLDER_NAME$\Resources\$CAPITAL$Resource;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Exception;

/**
 *
 * A $CLASS_NAME$ is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class $CLASS_NAME$ extends BaseController
{
    const VIEW = 'admin.$CAMEL_CASE$';
    const ROUTE = '$CAMEL_CASE$s';
    const LANG_PATH = "$CAMEL_CASE$.$CAMEL_CASE$";

    public function __construct(
        private $CAPITAL$Repository $$CAMEL_CASE$Repository,
    )
    {
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function index(array $request): View
    {
        $$CAMEL_CASE$List = $this->$CAMEL_CASE$Repository->get$CAPITAL$List($request);
        $$CAMEL_CASE$List = $CAPITAL$Resource::collection($$CAMEL_CASE$List)->response()->getData(true);
        return $this->returnView(self::VIEW.".index", $$CAMEL_CASE$List, $request);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function store($request): RedirectResponse
    {
        try {
            $this->$CAMEL_CASE$Repository->beginTransaction();
            $this->$CAMEL_CASE$Repository->insert($request);
            $this->$CAMEL_CASE$Repository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->$CAMEL_CASE$Repository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function edit(string $id): View | RedirectResponse
    {
        $$CAMEL_CASE$ = $this->$CAMEL_CASE$Repository->edit($id);
        $$CAMEL_CASE$ = new $CAPITAL$Resource($$CAMEL_CASE$);
        $$CAMEL_CASE$ = $$CAMEL_CASE$->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . ".edit", $$CAMEL_CASE$);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function show(string $id): View | RedirectResponse
    {
        $$CAMEL_CASE$ = $this->$CAMEL_CASE$Repository->show($id);
        $$CAMEL_CASE$ = new $CAPITAL$Resource($$CAMEL_CASE$);
        $$CAMEL_CASE$ = $$CAMEL_CASE$->response()->getData(true)['data'];
        return $this->returnView(self::VIEW . '.show', $$CAMEL_CASE$);
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->$CAMEL_CASE$Repository->beginTransaction();
            $this->$CAMEL_CASE$Repository->update($request, $id);
            $this->$CAMEL_CASE$Repository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->$CAMEL_CASE$Repository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////

    public function destroy($request): RedirectResponse
    {
         try {
            $this->$CAMEL_CASE$Repository->beginTransaction();
            $this->$CAMEL_CASE$Repository->delete($request['id']);
            $this->$CAMEL_CASE$Repository->commit();
            return $this->redirectRoute(self::ROUTE . ".index", __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->redirectBackWithError($this->$CAMEL_CASE$Repository, $e);
        }
    }

    ///////////////////////////This is Method Divider///////////////////////////////////////
}
