<?php

namespace $NAMESPACE$;

use $PROJECT_NAME$\Foundations\Domain\$FOLDER_NAME$\Repositories\$CAPITAL$RepositoryInterface;
use $PROJECT_NAME$\$PATH_NAME$\Common\BaseController;
use $PROJECT_NAME$\$PATH_NAME$\$FOLDER_NAME$\Resources\$CAPITAL$Resource;
use Illuminate\Http\RedirectResponse;
use Illuminate\Routing\ResponseFactory;
use Illuminate\View\View;
use Exception;

/**
 *
 * A $CLASS_NAME$ is the manager of methods.
 * Generated By Custom Artisan Cmd
 * @author Nay Ba la
 * https://github.com/naybala
 * https://naybala.netlify.app/
 *
 */

class $CLASS_NAME$ extends BaseController
{
    const VIEW = 'admin.$CAMEL_CASE$';
    const ROUTE = '$CAMEL_CASE$s';
    const LANG_PATH = "$CAMEL_CASE$.$CAMEL_CASE$";

    public function __construct(
        private $CAPITAL$RepositoryInterface $$CAMEL_CASE$RepositoryInterface,
        private ResponseFactory $responseFactory
    )
    {
    }

    public function index(array $request): View
    {
        $$CAMEL_CASE$List = $this->$CAMEL_CASE$RepositoryInterface->get$CAPITAL$List($request);
        $$CAMEL_CASE$List = $CAPITAL$Resource::collection($$CAMEL_CASE$List)->response()->getData(true);
        return $this->responseFactory->successView(self::VIEW.".index", $$CAMEL_CASE$List);
    }

    public function create(): View
    {
        return view(self::VIEW.'.create');
    }

    public function store($request): RedirectResponse
    {
        try {
            $this->$CAMEL_CASE$RepositoryInterface->beginTransaction();
            $this->$CAMEL_CASE$RepositoryInterface->insert($request);
            $this->$CAMEL_CASE$RepositoryInterface->commit();
            return $this->responseFactory->successIndexRedirect(self::ROUTE, __(self::LANG_PATH . '_created'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->$CAMEL_CASE$RepositoryInterface, $e->getMessage());
        }
    }

    public function edit(string $id): View | RedirectResponse
    {
        $$CAMEL_CASE$ = $this->$CAMEL_CASE$RepositoryInterface->edit($id);
        $$CAMEL_CASE$ = new $CAPITAL$Resource($$CAMEL_CASE$);
        $$CAMEL_CASE$ = $$CAMEL_CASE$->response()->getData(true)['data'];
        return $this->responseFactory->successView(self::VIEW . ".edit", $$CAMEL_CASE$);
    }

    public function show(string $id): View | RedirectResponse
    {
        $$CAMEL_CASE$ = $this->$CAMEL_CASE$RepositoryInterface->show($id);
        $$CAMEL_CASE$ = new $CAPITAL$Resource($$CAMEL_CASE$);
        $$CAMEL_CASE$ = $$CAMEL_CASE$->response()->getData(true)['data'];
        return $this->responseFactory->successView(self::VIEW . '.show', $$CAMEL_CASE$);
    }

    public function update($request, string $id): RedirectResponse
    {
         try {
            $this->$CAMEL_CASE$RepositoryInterface->beginTransaction();
            $this->$CAMEL_CASE$RepositoryInterface->update($request, $id);
            $this->$CAMEL_CASE$RepositoryInterface->commit();
            return $this->responseFactory->successShowRedirect(self::ROUTE, $id, __(self::LANG_PATH . '_updated'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->$CAMEL_CASE$RepositoryInterface, $e->getMessage());
        }
    }

    public function destroy($request): RedirectResponse
    {
         try {
            $this->$CAMEL_CASE$RepositoryInterface->beginTransaction();
            $this->$CAMEL_CASE$RepositoryInterface->delete($request['id']);
            $this->$CAMEL_CASE$RepositoryInterface->commit();
            return $this->responseFactory->successIndexRedirect(self::ROUTE, __(self::LANG_PATH . '_deleted'));
        } catch (Exception $e) {
            return $this->responseFactory->redirectBackWithError($this->$CAMEL_CASE$RepositoryInterface, $e->getMessage());
        }
    }

}
